#lang racket

(require openssl)
(require racket/format)

(require "src/sandbox.rkt")

(define (send out text)
        (display (string-append (regexp-replace "[\r\n]+" text "\n") "\n"))
        (flush-output (current-output-port))
        (fprintf out (string-append text "\r\n"))
        (flush-output out)
)

(define (connect server port nick)
	(define-values (in out) (ssl-connect server port))
	(send out (string-append "NICK " nick))
	(flush-output out)
	(sleep 1)
	(send out (string-append "USER " nick " 0 * :" nick))
	(flush-output out)
	(flush-output out)
	;(current-input-port in)
	;(current-output-port out)
	(values in out)
)

(define-values (in out) (connect "irc.esper.net" 6697 "rackoon"))
(define (input-loop)
	(send out (read-line (current-input-port)))
	(input-loop)
)
(thread (lambda () (input-loop)))
;(fprintf out "JOIN #ocbots\r\n")
(flush-output out)
(define (loop)
	(flush-output out)
	(flush-output (current-output-port))
	(let ([line (read-line in)]) (
	;(define line (read-line in))
	(display (regexp-replace "[\r\n]+" line "\n"))
	(flush-output (current-output-port))
	(when (regexp-match? #rx":(.*?)!(.*?)@(.*?) PRIVMSG (.*?) :(.*)" line)
		;(let-values ([(nick user host chan msg) (cdr (regexp-match #rx":(.*?)!(.*?)@(.*?) PRIVMSG (.*?) :(.*)" line))]) (
		(match (cdr (regexp-match #rx":(.*?)!(.*?)@(.*?) PRIVMSG (.*?) :(.*)" line)) [(list nick user host chan msg)
			(flush-output out)
			(cmd_eval out nick user host chan msg)
			(flush-output out)
			;(cmd_eval (first vals))
		])
	)
	; PING logic here.
	(when (regexp-match? #rx"PING (.*)" line)
		(send out (string-append "PONG " (second (regexp-match #rx"PING (.*)" line))))
	)
	; MOTD Join logic.
	(when (regexp-match? #rx":(.*) 376" line)
		(send out "JOIN #vifino")
		(send out "JOIN #ocbots")
	)
	(flush-output out)
	(sleep 0)
	(flush-output out)
	(loop)
)))
(loop)
